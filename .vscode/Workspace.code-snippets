{
  // Place your N-D-B Next Version workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Command": {
    "prefix": "!Command",
    "body": [
      "import { CommandConfig, CommandPermissions } from \"@/common/decorators/\";",
      "import { CommandConfigGuard, CommandPermissionsGuard } from \"@/common/guards\";",
      "import { CurrentTranslate, TranslationFn, localizationMapByKey } from \"@necord/localization\";",
      "import { Injectable, Logger, UseGuards } from \"@nestjs/common\";",
      "import { Ctx, SlashCommandContext, Subcommand } from \"necord\";",
      "",
      "@Injectable()",
      "export class $1Command {",
      "\tprivate readonly logger = new Logger($1Command.name);",
      "",
      "\t@Subcommand({",
      "\t\tname: \"$2\",",
      "\t\tdescription: \"$3\",",
      "\t\tnameLocalizations: localizationMapByKey(\"$4\"),",
      "\t\tdescriptionLocalizations: localizationMapByKey(\"$5\"),",
      "\t})",
      "\t@CommandConfig({ category: \"$6\", disable: false })",
      "\t@CommandPermissions({",
      "\t\tuser: [],",
      "\t\tbot: [],",
      "\t\tguildOnly: false,",
      "\t\ttestOnly: true,",
      "\t\townerOnly: true,",
      "\t})",
      "\tpublic async onCommandRun(@Ctx() [interaction]: SlashCommandContext, @CurrentTranslate() t: TranslationFn) {",
      "\t\t",
      "\t}",
      "}",
      "$0"
    ],
    "description": "Command"
  },
  "Autocomplete": {
    "prefix": "!AutoComplete",
    "body": [
      "import { Injectable } from \"@nestjs/common\";",
      "import { AutocompleteInteraction, CacheType } from \"discord.js\";",
      "import { AutocompleteInterceptor } from \"necord\";",
      "",
      "@Injectable()",
      "export class $1AutoComplete extends AutocompleteInterceptor {",
      "\tpublic transformOptions(interaction: AutocompleteInteraction<CacheType>): void | Promise<void> {",
      "\t\tconst focus = interaction.options.getFocused(true);",
      "",
      "\t\treturn interaction.respond(",
      "\t\t\t[\"$2\"]",
      "\t\t\t\t.filter((choice) => choice.startsWith(focus.value.toString()))",
      "\t\t\t\t.map((choice) => ({ name: choice, value: choice })),",
      "\t\t);",
      "\t}",
      "}",
      "$0"
    ],
    "description": "AutoComplete"
  }
}
