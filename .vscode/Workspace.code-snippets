{
  // Place your N-D-B Next Version workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Event": {
    "scope": "typescript",
    "prefix": "!Event",
    "body": [
      "import NDBClient from \"@/Core/NDBClient\";",
      "import { BaseEvent } from \"@/Utils/Structures\";",
      "import { EventOptions } from \"@/Types\";",
      "import {  } from \"discord.js\";",
      "",
      "export default class Event extends BaseEvent {",
      "  constructor(client: NDBClient) {",
      "    const options: EventOptions = {",
      "      name: \"\",",
      "      type: \"\",",
      "      emitter: \"\",",
      "      enable: true",
      "    };",
      "",
      "    super(client, options);",
      "  }",
      "",
      "  async run(client: NDBClient) {",
      "    ",
      "  }",
      "};",
      ""
    ],
    "description": "Didcord Event"
  },

  "LagacyCommand": {
    "scope": "typescript",
    "prefix": "!LegacyCommand",
    "body": [
      "import NDBClient from \"@/Core/NDBClient\";",
      "import { MessageTools } from \"@/Utils/Tools\";",
      "import { BaseCommand } from \"@/Utils/Structures\";",
      "import { Message } from \"discord.js\";",
      "",
      "export default class Command extends BaseCommand {",
      "  constructor(client: NDBClient, ...args: string[]) {",
      "    const options: CommandOptions = {",
      "      name: \"\",",
      "      aliases: [\"\"],",
      "      description: \"\",",
      "      category: \"\",",
      "      usage: \"\",",
      "      disable: false,",
      "      cooldown: 0,",
      "      permissions: {",
      "        bot: [\"\"],",
      "        user: [\"\"],",
      "      },",
      "      minArgs: 0,",
      "      maxArgs: 0,",
      "      guildOnly: false,",
      "      ownerOnly: false,",
      "      nsfw: false,",
      "      ndcash: 0,",
      "      DM: false,",
      "    };",
      "    super(client, options, args);",
      "  }",
      "",
      "  async run(client: NDBClient, message: Message, args: Array<string>) {}",
      "}",
      ""
    ],
    "description": "Discord Legacy Command"
  },

  "SlashCommand": {
    "scope": "typescript",
    "prefix": "!SlashCommand",
    "body": [
      "import NDBClient from \"@/Core/NDBClient\";",
      "import { SlashCommandOptions } from \"@/Types\";",
      "import { InteractionTools } from \"@/Utils/Tools\";",
      "import { BaseCommand } from \"@/Utils/Structures\";",
      "import {",
      "  CommandInteraction,",
      "  CommandInteractionOptionResolver,",
      "} from \"discord.js\";",
      "",
      "export default class Command extends BaseSlashCommand {",
      "  constructor(client: NDBClient, args: CommandInteractionOptionResolver) {",
      "    const options: SlashCommandOptions = {",
      "      data: {",
      "        name: \"\"",
      "        description: \"\"",
      "      }",
      "      category: \"\"",
      "      disable: false,",
      "      cooldown: 0,",
      "      permissions: {",
      "        bot: [\"\"],",
      "        user: [\"\"],",
      "      },",
      "      ownerOnly: false,",
      "      nsfw: false,",
      "      ndcash: 0,",
      "      deployMode: \"Test\"",
      "    };",
      "    super(client, options, args);",
      "  }",
      "",
      "  async run(client: NDBClient, interaction: CommandInteraction, args: CommandInteractionOptionResolver) {}",
      "}",
      ""
    ],
    "description": "Discord Slash Command"
  },

  "SubSlashCommand": {
    "scope": "typescript",
    "prefix": "!SubSlashCommand",
    "body": [
      "import NDBClient from \"@/Core/NDBClient\";",
      "import { SubCommandOptions } from \"@/Types\";",
      "import { InteractionTools } from \"@/Utils/Tools\";",
      "import { BaseSubCommand } from \"@/Utils/Structures\";",
      "import {",
      "  CommandInteraction,",
      "  CommandInteractionOptionResolver,",
      "} from \"discord.js\";",
      "",
      "export default class Command extends BaseSubCommand {",
      "  constructor(client: NDBClient, args: CommandInteractionOptionResolver) {",
      "    const options: SubCommandOptions = {",
      "      data: {",
      "        name: \"\"",
      "        description: \"\"",
      "      }",
      "      category: \"\"",
      "      disable: false,",
      "      cooldown: 0,",
      "      permissions: {",
      "        bot: [\"\"],",
      "        user: [\"\"],",
      "      },",
      "      ownerOnly: false,",
      "      nsfw: false,",
      "      ndcash: 0,",
      "      deployMode: \"Test\"",
      "    };",
      "    super(client, options, args);",
      "  }",
      "",
      "  async run(client: NDBClient, interaction: CommandInteraction, args: CommandInteractionOptionResolver) {}",
      "}",
      ""
    ],
    "description": "Discord Slash Command"
  }
}
